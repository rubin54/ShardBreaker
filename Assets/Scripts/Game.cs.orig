using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;
using UnityEngine.Playables;

public class Game : MonoBehaviour
{
    public static Game instance;

    public GameObject player;
    public GameObject deathMenu;
    public GameObject pauseMenu;
    public GameObject optionsMenu;
    private OptionsMenu options;

    [SerializeField] private UI_Ability ui_ability;

    [Header("Ability Section")]
    public List<Ability> abilities = new List<Ability>();

    public TextMeshProUGUI textbox;
    public PlayableDirector playable;
    public GameObject crosshair;

    [Header("GlobalVariables")]
    public float mouseSensitivity;
    public float musicVolume;
    public float sfxVolume;
    public bool startBattle;
    public int enemyInBattleIndex;
    public InputHandler input;

    private void Awake()
    {
        instance = this;
        if (optionsMenu)
        {
            options = optionsMenu.GetComponent<OptionsMenu>();
        }

        input = FindObjectOfType<InputHandler>();
        input.GetComponentReferences();
        GetPlayerPrefsData();
    }

    private void Start()
    {
        Enemy.EnemyStartAttack += ChangeMusicState;
        Enemy.EnemyIsDead += CheckMusicState;
    }

    public void ChangeMusicState()
    {
        enemyInBattleIndex++;
        if (!startBattle)
        {
            startBattle = true;
        }
        AkSoundEngine.SetState("Music_States", "Battle");
    }

    public void CheckMusicState()
    {
        enemyInBattleIndex--;
        startBattle = false;
        StartCoroutine(WaitTime());
    }

    IEnumerator WaitTime()
    {
        yield return new WaitForSeconds(3f);
        if (enemyInBattleIndex <= 0)
        {
            AkSoundEngine.SetState("Music_States", "Exploration");
        }
    }


    private void GetPlayerPrefsData()
    {
        musicVolume = PlayerPrefs.GetFloat("musicVolume");
        options.SetMusicValue(musicVolume);

        sfxVolume = PlayerPrefs.GetFloat("sfxVolume");
        options.SetSfxValue(sfxVolume);

        mouseSensitivity = PlayerPrefs.GetFloat("mouseSensitivity");
        options.SetSensitivityValue(mouseSensitivity);
        player.GetComponent<MouseLook>().SetSensitivity(mouseSensitivity);
    }

    public void UpdateMouseSensitivity()
    {
        mouseSensitivity = PlayerPrefs.GetFloat("mouseSensitivity");
        player.GetComponent<MouseLook>().SetSensitivity(mouseSensitivity);
    }

    public void UpdateUIAbility(int index)
    {
        ui_ability.SetAbilityActive(index);
    }

    public void ShowText()
    {
        playable.Play();
    }

    public void PlayCrosshairEffect()
    {
        crosshair.GetComponent<PlayableDirector>().Play();
    }


    public void SceneChange()
    {
        input.SetNUll();
    }

}